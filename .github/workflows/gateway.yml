name: 빌드 및 배포

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

permissions:
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: gradlew 실행 권한 부여
        run: chmod +x ./gradlew
        shell: bash

      - name: 환경 변수 출력
        run: |
          echo "ELASTICSEARCH_HOST=${{ secrets.ELASTICSEARCH_HOST }}"
          echo "ELASTICSEARCH_PORT=${{ secrets.ELASTICSEARCH_PORT }}"
        env:
          ELASTICSEARCH_HOST: ${{ secrets.ELASTICSEARCH_HOST }}
          ELASTICSEARCH_PORT: ${{ secrets.ELASTICSEARCH_PORT }}

      - name: application.yml.template 생성
        run: |
          mkdir -p gateway/src/main/resources
          cat > gateway/src/main/resources/application.yml.template <<EOL
          server:
            tomcat:
              threads:
                max: 62
                min-spare: 20
              accept-count: 20
              max-connections: 10000
            port: 8000

          spring:
            application:
              name: j4jg_gateway
            cache:
              type: redis
            zipkin:
              base-url: http://localhost:9411
              sender:
                type: web
                compression: true
              sampler:
                probability: 1.0

            main:
              web-application-type: reactive
              allow-bean-definition-overriding: true
            datasource:
              driver-class-name: com.mysql.cj.jdbc.Driver
              url: jdbc:mysql://${{ secrets.DB_HOST }}:3306/j4jg?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&autoReconnect=true&failOverReadOnly=false
              username: \${MYSQL_USER}
              password: \${MYSQL_PASSWORD}
              hikari:
                maximum-pool-size: 62
                minimum-idle: 20
                idle-timeout: 600000
                max-lifetime: 1800000
                connection-timeout: 30000
            jpa:
              hibernate:
                ddl-auto: create
              show-sql: true
              properties:
                hibernate:
                  format_sql: true
                  dialect: org.hibernate.dialect.MySQLDialect

            elasticsearch:
              uris:
                - \${ELASTICSEARCH_HOST}:9200
            jwt:
              secret: \${JWT_SECRET}
              accessTokenExpirationTime: 1800000
              refreshTokenExpirationTime: 259200000

            security:
              aes:
                secret-key: \${AES_SECRET_KEY}
              oauth2:
                client:
                  registration:
                    kakao:
                      client-name: kakao
                      client-id: \${KAKAO_CLIENT_ID}
                      client-secret: \${KAKAO_CLIENT_SECRET}
                      redirect-uri: http://api.gateway.j4jg.shop/login/oauth2/code/kakao
                      authorization-grant-type: authorization_code
                      client-authentication-method: client_secret_post
                      provider: kakao
                      scope:
                        - account_email
                        - phone_number
                    google:
                      client-name: google
                      client-id: \${GOOGLE_CLIENT_ID}
                      client-secret: \${GOOGLE_CLIENT_SECRET}
                      redirect-uri: http://api.gateway.j4jg.shop/login/oauth2/code/google
                      authorization-grant-type: post
                      provider: google
                      scope:
                        - profile
                        - email
                  provider:
                    kakao:
                      authorization-uri: https://kauth.kakao.com/oauth/authorize
                      token-uri: https://kauth.kakao.com/oauth/token
                      user-info-uri: https://kapi.kakao.com/v2/user/me
                      user-name-attribute: id
                    google:
                      authorization-uri: https://accounts.google.com/o/oauth2/auth
                      token-uri: https://oauth2.googleapis.com/token
                      user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
                      user-name-attribute: sub

            data:
              redis:
                host: \${REDIS_HOST}
                port: \${REDIS_PORT}

          datasource:
            master:
              url: jdbc:mysql://${{ secrets.DB_HOST }}:3306/j4jg?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&autoReconnect=true&failOverReadOnly=false
              username: \${MYSQL_USER}
              password: \${MYSQL_PASSWORD}
            slave:
              url: jdbc:mysql://${{ secrets.DB_HOST }}:3307/j4jg?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&autoReconnect=true&failOverReadOnly=false
              username: \${MYSQL_USER}
              password: \${MYSQL_PASSWORD}

          routing:
            datasource:
              default-target-datasource: master
              target-datasources:
                slave: slave

          aws:
            access-key: \${AWS_ACCESS_KEY_ID}
            secret-key: \${AWS_SECRET_ACCESS_KEY}
            region: ap-northeast-2

          logging:
            level:
              org.springframework.cloud.gateway: DEBUG
              org.springframework.security: DEBUG
          EOL

      - name: Yaml 설정
        run: |
          envsubst < gateway/src/main/resources/application.yml.template > gateway/src/main/resources/application.yml
          cat gateway/src/main/resources/application.yml
        env:
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          AES_SECRET_KEY: ${{ secrets.AES_SECRET_KEY }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DB_HOST: ${{ secrets.DB_HOST }}

      - name: Gradle로 gateway 모듈만 빌드
        run: ./gradlew :gateway:clean :gateway:bootJar
        shell: bash

      - name: 현재 시간 가져오기
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      - name: 현재 시간 출력
        run: echo "CurrentTime=${{steps.current-time.outputs.formattedTime}}"
        shell: bash

      - name: Install envsubst
        run: sudo apt-get install -y gettext

      - name: 배포 패키지 생성
        run: |
          mkdir -p deploy
          JAR_FILE=$(ls gateway/build/libs/*.jar | head -n 1)
          if [ -f "$JAR_FILE" ]; then
            cp "$JAR_FILE" deploy/application.jar
          else
            echo "JAR 파일이 없습니다!"
            exit 1
          fi
          
          if [ -f gateway/Procfile ]; then
            cp gateway/Procfile deploy/Procfile
          else
            echo "Procfile이 없습니다!"
            exit 1
          fi
          
          if [ -d .ebextensions ]; then
            cp -r .ebextensions deploy/.ebextensions
          else
            echo ".ebextensions 디렉토리가 없습니다!"
            exit 1
          fi
          
          if [ -d .platform ]; then
            cp -r .platform deploy/.platform
          else
            echo ".platform 디렉토리가 없습니다!"
            exit 1
          fi
          
          cd deploy && zip -r deploy.zip .
        shell: bash

      - name: S3에 애플리케이션 버전 업로드
        run: |
          aws s3 cp deploy/deploy.zip s3://5ttbuket/deploy/deploy.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-2

      - name: 새로운 Elastic Beanstalk 애플리케이션 버전 생성
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name gateway \
            --version-label github-action-${{steps.current-time.outputs.formattedTime}} \
            --source-bundle S3Bucket=5ttbuket,S3Key=deploy/deploy.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-2

      - name: Elastic Beanstalk 환경 업데이트
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name Gateway-env \
            --version-label github-action-${{steps.current-time.outputs.formattedTime}}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-2
